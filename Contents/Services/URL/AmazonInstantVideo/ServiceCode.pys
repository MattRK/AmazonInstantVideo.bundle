#   Copyright 2013 Josh Kearney
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import datetime
import re
import time

import common
import constants as c


def MetadataObjectForURL(url):
    asin = url.split("/")[5]
    page = HTML.ElementFromURL(c.PRODUCT_URL % asin)

    title = page.xpath(c.TITLE_PATTERN)[0].strip()
    summary = page.xpath(c.SUMMARY_PATTERN)[0].strip()
    thumb = common.generate_thumb(page)

    video_metadata = parse_video_metadata(page)
    episode_metadata = parse_episode_metadata(page, title)
    movie_metadata = parse_movie_metadata(page)

    kwargs = {
        "source_title": c.PLUGIN_TITLE,
        "title": title,
        "summary": summary,
        "thumb": thumb
    }

    if video_metadata and episode_metadata:
        kwargs.update(video_metadata)
        kwargs.update(episode_metadata)

        return EpisodeObject(**kwargs)
    elif video_metadata and movie_metadata:
        kwargs.update(video_metadata)
        kwargs.update(movie_metadata)

        return MovieObject(**kwargs)

    return MovieObject(**kwargs)


def MediaObjectsForURL(url):
    return [
        MediaObject(
            protocol="rtmp",
            parts=[
                PartObject(
                    key=Callback(PlayVideo, url=url),
                    streams=[
                        AudioStreamObject(language_code=Locale.Language.English)
                    ]
                )
            ]
        )
    ]


@indirect
def PlayVideo(url):
    page = HTTP.Request(url, immediate=True).content

    asin = url.split("/")[5]
    customer_id = re.search(c.CUSTOMER_ID_PATTERN, page).group(1)
    device_id = customer_id + str(int(time.strftime("%Y%m%d")) * 100000) + asin
    swf_url = re.search(c.SWF_URL_PATTERN, page).group(1)
    token = re.search(c.TOKEN_PATTERN, page).group(1)

    stream_url = "https://atv-ps.amazon.com/cdp/catalog/GetStreamingUrlSets?deviceTypeID=%s&version=%s&asin=%s&firmware=%s&customerID=%s&token=%s&format=%s&deviceID=%s" % (
            "A13Q6A55DBZB7M", "1", asin, "WIN%2010,0,181,14%20PlugIn", customer_id, token, "json", device_id)

    try:
        stream_data = JSON.ObjectFromURL(stream_url, cacheTime=600)
        stream_json = stream_data["message"]["body"]["urlSets"]["streamingURLInfoSet"][0]["streamingURLInfo"]
    except KeyError:
        raise Ex.StreamLimitExceeded

    streams = []
    for stream in stream_json:
        if stream["drm"] == "NONE":
            streams.append((int(stream["bitrate"]), stream["url"]))

    # NOTE(jk0): Use the highest bitrate available.
    streams.sort(key=lambda x: x[0], reverse=True)

    rtmp_url = streams[0][1].split("/", 3)
    hostname = rtmp_url[2]
    path = rtmp_url[3][9:].split("?", 1)
    auth = path[1]
    clip = path[0].replace(".mp4", "")
    rtmp_stream = "rtmpe://%s:1935/ondemand?%s" % (hostname, auth)

    return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=rtmp_stream, clip=clip, swf_url=swf_url))


def parse_video_metadata(page):
    try:
        rating = float(page.xpath(c.RATING_PATTERN)[0].split(" out of ", 1)[0]) * 2
        pretty_duration = page.xpath(c.DURATION_PATTERN)[0].strip().split(" ", 3)
        content_rating = page.xpath(c.CONTENT_RATING_PATTERN)[0].split("Rated ", 1)[0]

        if len(pretty_duration) < 3:
            duration = 60000 * int(pretty_duration[0])
        else:
            duration = 3600000 * int(pretty_duration[0]) + 60000 * int(pretty_duration[2])
    except (IndexError, ValueError):
        return None

    return {
        "rating": rating,
        "content_rating": content_rating,
        "duration": duration
    }


def parse_episode_metadata(page, title):
    try:
        show_info = title.split(" Season ", 1)
        show_name = show_info[0]

        episode_info = show_info[1].split(", ", 1)

        season = int(episode_info[0])
        episode_number, episode_name = episode_info[1].split("Ep. ", 1)[1].split(" ", 1)
        episode_number = int(episode_number)

        air_date = pretty_duration = page.xpath(c.AIRDATE_PATTERN)[0].strip().split(" ", 3)
        air_date = datetime.datetime.strptime(" ".join(air_date), '%B %d, %Y')
    except (IndexError, ValueError):
        return None

    return {
        "title": episode_name[1:-1],
        "show": show_name,
        "originally_available_at": air_date,
        "season": season,
        "index": episode_number
    }


def parse_movie_metadata(page):
    try:
        release_year = int(page.xpath(c.RELEASE_YEAR_PATTERN)[0])
        studio = page.xpath(c.STUDIO_PATTERN)[0].strip()

        directors = []
        for director in page.xpath(c.DIRECTOR_PATTERN)[0].split(","):
            directors.append(director.strip())
    except (IndexError, ValueError):
        return None

    return {
        "year": release_year,
        "studio": studio,
        "directors": directors
    }
